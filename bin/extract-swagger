#!/usr/bin/env node
'use strict';

/* eslint-disable no-console */

const yaml = require('js-yaml');
const fs = require('fs');
const program = require('commander');
const axios = require("axios");
const https = require("https");

const { extractSwagger, listEndpoints } = require('../');
const { pathToJs } = require('../lib/pathToJs');



const getSwaggerFile = (pathToSwagger, urlToSwagger, disableStrictSSL, disableProxy) =>
  new Promise((resolve) => {
    if (pathToSwagger && fs.existsSync(pathToSwagger)) {
      console.log(`try to get swagger by path "${pathToSwagger}"`);
      resolve(parseSwaggerFile(fs.readFileSync(pathToSwagger, 'utf8')));
    } else {
      console.log(`try to get swagger by URL "${urlToSwagger}"`);
      // setup options for Axios
      const axiosOptions = {};
      //
      if (disableStrictSSL) {
        axiosOptions.httpsAgent = new https.Agent({
          rejectUnauthorized: false,
        });
      }
      //
      if (disableProxy) axiosOptions.proxy = false;
      //
      axios
        .get(urlToSwagger, axiosOptions)
        .then((res) => resolve(parseSwaggerFile(res.data)))
        .catch((err) => console.error(`error while getting swagger by URL ${urlToSwagger}:`, err));
    }
  });

  const parseSwaggerFile = (content) => {
    if (typeof content !== "string") return content;
  
    try {
      return JSON.parse(content);
    } catch (e) {
      return yaml.safeLoad(content);
    }
  };

program
  .version('0.0.1')
  .usage('[options] <endpoint> [<endpoint> ...]')
  .option('-sf, --src <sourcefile>', 'Source swagger/openapi spec')
  .option('-su, --srcUrl <sourceurl>', 'Source swagger/openapi spec')
  .option('-d, --dest <destfile>', 'Generated swagger/openapi spec')
  .option("--disableStrictSSL", "disabled strict SSL", false)
  .option("--disableProxy", "disabled proxy", false)
  .option('-l, --list-paths')
  .parse(process.argv);

const {
  srcUrl ,
  src,
  dest ,
  disableStrictSSL,
  disableProxy } = program 

//console.info(program)

if(src && srcUrl)
{
  console.error(`Error only one source is possible`);
  process.exit();
}

getSwaggerFile(src,srcUrl,disableStrictSSL,disableProxy).then((sourceDoc) => {

  if (program.listPaths) {
    console.log(`List of endpoints defined in ${src || srcUrl}:`);
    listEndpoints(sourceDoc).forEach(path => console.log(path));
    process.exit();
  }
  
  const paths = extractSwagger(sourceDoc, program.args);
  console.log(paths);

  try {
    fs.writeFileSync(dest, pathToJs(paths));
  } catch (e) {
    console.log(e);
    process.exit();
  }

}).catch(e => {
  console.log(e);
  process.exit();
})
